---
title: "Lab 5"
author: "Rachel Ramos"
format: html
---
These data are from the end of the winter semester of the 2020-2021 academic
year. In the period of data collection, all university classes were entirely
online amid the COVID-19 pandemic. While expected learning outcomes were not
changed, the online mode of study could have affected grading policies and could
have implications for data.

**Average SET scores** were combined with many other variables, including:

1.  **characteristics of the teacher** (degree, seniority, gender, SET scores in
the past 6 semesters).
2.  **characteristics of the course** (time of day, day of the week, course
type, course breadth, class duration, class size).
3.  **percentage of students providing SET feedback.**
4.  **course grades** (mean, standard deviation, percentage failed for the
current course and previous 6 semesters).

This rich dataset allows us to **investigate many of the biases in student evaluations of teaching** that have been reported in the literature and to formulate new
hypotheses.

Before tackling the problems below, study the description of each variable
included in the `teacher_evals_codebook.pdf`.

**1. Load the appropriate R packages for your analysis.**

```{r}
#| label: setup
# code chunk for loading packages
library(dplyr)
library(tidyverse)
```

**2. Load in the `teacher_evals` data.** 

```{r}
#| label: load-data
# code chunk for importing the data
eval<-read_csv("data/teacher_evals.csv")
```

### Data Inspection + Summary

**3. Provide a brief overview (~4 sentences) of the dataset.**

```{r}
#| label: explore-data
# you may want to use code to answer this question
summary(eval)

```

**4. What is the unit of observation (i.e. a single row in the dataset) identified by?**

```{r}
#| label: row-identification
# you may want to use code to answer this question
summary(eval)
```
Each row is a class
**5. Use _one_ `dplyr` pipeline to clean the data by:**

- **renaming the `gender` variable `sex`**
- **removing all courses with fewer than 10 respondents**
- **changing data types in whichever way you see fit (e.g., is the instructor ID really a numeric data type?)**
- **only keeping the columns we will use -- `course_id`, `teacher_id`, `question_no`, `no_participants`, `resp_share`, `SET_score_avg`, `percent_failed_cur`, `academic_degree`, `seniority`, and `sex`**

**Assign your cleaned data to a new variable named `teacher_evals_clean` â€“- use these data going forward. Save the data as `teacher_evals_clean.csv` in the `data-clean` folder.**

```{r}
#| label: data-cleaning
# code chunk for Q4
teacher_evals_clean <- eval |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(
    teacher_id = as.character(teacher_id),  
    course_id = as.character(course_id),
    across(c(question_no, no_participants), as.integer),
    across(c(resp_share, SET_score_avg, percent_failed_cur), as.numeric),
    across(c(academic_degree, seniority, sex), as.factor)
  ) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, 
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

write.csv(teacher_evals_clean, "clean/teacher_evals_clean.csv")
```

**6. How many unique instructors and unique courses are present in the cleaned dataset?**

```{r}
#| label: unique-courses
# code chunk for Q5
teacher_evals_clean |>
  summarize(
    unique_instructors = n_distinct(teacher_id),
    unique_courses = n_distinct(course_id))
  
```
There are 297 unique intructors and 939 unique courses. 
**7. One teacher-course combination has some missing values, coded as `NA`. Which instructor has these missing values? Which course? What variable are the missing values in?**

```{r}
#| label: uncovering-missing-values
# code chunk for Q6

```

**8. What are the demographics of the instructors in this study? Investigate the variables `academic_degree`, `seniority`, and `sex` and summarize your findings in ~3 complete sentences.**

```{r}
#| label: exploring-demographics-of-instructors
# code chunk for Q7
instructor_demo <- teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE) |>
  count(academic_degree, seniority, sex)

instructor_demo
```
DO SENTENCES
**9. Each course seems to have used a different subset of the nine evaluation questions. How many teacher-course combinations asked all nine questions?**

```{r}
#| label: teacher-course-asked-every-question
teacher_course_questions <- teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
  summarize(
    questions_asked = n_distinct(question_no),
    .groups = "drop"  
  ) |>
  filter(questions_asked == 9) 

teacher_course_questions|>
  count()
```
49 teacher-course combinations asked all nine questions.
## Rate my Professor

**10. Which instructors had the highest and lowest average rating for Question 1 (I learnt a lot during the course.) across all their courses?**

```{r}
#| label: question-1-high-low
# code chunk for Q9
average_ratings <- teacher_evals_clean |>
  filter(question_no == 1) |>
  group_by(teacher_id) |>
  summarize(
    avg_rating_q1 = mean(SET_score_avg, na.rm = TRUE))
```

**11. Which instructors with one year of experience had the highest and lowest average percentage of students failing in the current semester across all their courses?**

```{r}
#| label: one-year-experience-failing-students
# code chunk for Q10
one_year_experience <- teacher_evals_clean |>
  filter(seniority == "1 year")

failure_rates <- one_year_experience |>
  group_by(teacher_id) |>
  summarize(
    avg_percent_failed = mean(percent_failed_cur, na.rm = TRUE),
    .groups = "drop")

highest_failure <- failure_rates |>
  filter(avg_percent_failed == max(avg_percent_failed, na.rm = TRUE))

lowest_failure <- failure_rates |>
  filter(avg_percent_failed == min(avg_percent_failed, na.rm = TRUE))

highest_failure
lowest_failure
```
>No data found. 
**12. Which female instructors with either a doctorate or professional degree had the highest and lowest average percent of students responding to the evaluation across all their courses?**

```{r}
#| label: female-instructor-student-response
# code chunk for Q11
highest_response <- teacher_evals_clean |>
  filter(sex == "female", academic_degree %in% c("doctorate", "professional degree"), !is.na(resp_share)) |>
  group_by(teacher_id) |>
  summarize(avg_resp_share = mean(resp_share, na.rm = TRUE), .groups = "drop") |>
  filter(avg_resp_share == max(avg_resp_share, na.rm = TRUE))

lowest_response <- teacher_evals_clean |>
  filter(sex == "female", academic_degree %in% c("doctorate", "professional degree"), !is.na(resp_share)) |>
  group_by(teacher_id) |>
  summarize(avg_resp_share = mean(resp_share, na.rm = TRUE), .groups = "drop") |>
  filter(avg_resp_share == min(avg_resp_share, na.rm = TRUE))


highest_response
lowest_response
```


